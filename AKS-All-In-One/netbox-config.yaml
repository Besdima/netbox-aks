apiVersion: v1
kind: ConfigMap
metadata:
  name: netbox-configmap
  namespace: netbox
data:
  # NetBox environment variables
  # More configuration can be added via: https://netbox.readthedocs.io/en/stable/configuration/optional-settings/
  #changeme
  ALLOWED_HOSTS: '*'
  CHANGELOG_RETENTION: "90"
  DB_HOST: netbox-psql.psql
  DB_NAME: netbox
  LOGIN_REQUIRED: "true"
  MEDIA_ROOT: /opt/netbox/netbox/media
  METRICS_ENABLED: "true"
  REDIS_HOST: netbox-redis.redis
  REDIS_CACHE_HOST: netbox-redis.redis
  REDIS_PORT: "6379"
  REDIS_CACHE_PORT: "6379"
  REDIS_DATABASE: "0"
  REDIS_CACHE_DATABASE: "1"
  MAINTENANCE_MODE: 'False'
  DEBUG: 'True'
  REMOTE_AUTH_ENABLED: 'True'
  REMOTE_AUTH_AUTO_CREATE_USER: 'True'
  # Regular LDAP Backend
  REMOTE_AUTH_BACKEND: adds.besdima.dev
  # SSO Enabled Backend
  #REMOTE_AUTH_BACKEND: 'django3_saml2_nbplugin.backends.SAML2CustomAttrUserBackend'
  REMOTE_AUTH_HEADER: 'HTTP_REMOTE_USER'
  REMOTE_AUTH_DEFAULT_GROUPS: 'Domain Users' #changeme

  # LDAP configuration against Microsoft Acive Directory
  # For more information around LDAP, see https://netbox.readthedocs.io/en/stable/installation/4-ldap/
  ldap_config.py: |
    import ldap
    from django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType

    # Read secret from file
    def read_secret(secret_name):
        try:
            f = open('/run/secrets/' + secret_name, 'r', encoding='utf-8')
        except EnvironmentError:
            return ''
        else:
            with f:
                return f.readline().strip()

    AUTH_LDAP_SERVER_URI = "ldaps://adds.besdima.dev"
    AUTH_LDAP_CONNECTION_OPTIONS = {
      ldap.OPT_REFERRALS: 0
    }
    # Uncomment line below if using TLS
    #AUTH_LDAP_START_TLS = True

    # Service user credentials. This account will be making all the queries when users attempt to log in
    AUTH_LDAP_BIND_DN = "CN=svc_netbox,OU=Users - Service and Other,DC=besdima,DC=dev" #changeme
    AUTH_LDAP_BIND_PASSWORD = read_secret('auth_ldap_bind_password')
    LDAP_IGNORE_CERT_ERRORS = True

    # Where to look for users
    AUTH_LDAP_USER_SEARCH = LDAPSearch("OU=US,DC=besdima,DC=dev") #changeme

    AUTH_LDAP_USER_DN_TEMPLATE = None

    # Map user attributes to Django attributes
    AUTH_LDAP_USER_ATTR_MAP = {
        "first_name": "givenName",
        "last_name": "sn",
        "username": "uid",
        "email": "mail"
    }

    AUTH_LDAP_GROUP_SEARCH = LDAPSearch("OU=Groups,OU=US,DC=besdima,DC=dev") #changeme

    # Choose type applicable to your LDAP
    #AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()
    AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

    # Groups defined in LDAP source and described here will be assigned the following permissions
    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
      # Allowed to navigate regular NetBox interface. Specific available actions are determined by individual user and group permissions
      "is_active": ["cn=Netbox-guest,OU=Groups,OU=US,DC=besdima,DC=dev"], #changeme
      # Allowed to navigate NetBox Administration menu. Specific available actions are determined by individual user and group permissions
      "is_staff": ["cn=Netbox-user,OU=Groups,OU=US,DC=besdima,DC=dev"], #changeme
      # Is given full admin permissions across this NetBox deployment, regardless of individual user or group permissions
      "is_superuser": ["cn=Netbox-admin,OU=Groups,OU=US,DC=besdima,DC=dev"], #changeme
    }

    # Groups defined in LDAP source and described here will be created within NetBox Authentication
    AUTH_LDAP_MIRROR_GROUPS = True #changeme

    AUTH_LDAP_FIND_GROUP_PERMS = True
    #AUTH_LDAP_CACHE_GROUPS = False
    AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600
